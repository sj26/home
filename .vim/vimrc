if has('vim_starting')
  execute pathogen#infect()
end

if has('persistent_undo')
  set undofile
  set undodir=$HOME/.vim/undo
endif

colors jellybeans

let mapleader = ','

nmap <Leader>v :tabe $MYVIMRC<CR>
nmap <Leader>V :source $MYVIMRC<CR>

" Format lists within comments
" https://stackoverflow.com/a/37172060/158252
set formatoptions+=n
set formatlistpat=^\\s*\\w\\+[.\)]\\s\\+\\\\|^\\s*[\\-\\+\\*]\\+\\s\\+

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" ack/ag
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
for command in ['Ack', 'AckAdd', 'AckFromSearch', 'LAck', 'LAckAdd', 'AckFile', 'AckHelp', 'LAckHelp', 'AckWindow', 'LAckWindow']
  exe 'command ' . substitute(command, 'Ack', 'Ag', "") . ' ' . command
endfor

" fzf
nmap ; :Windows<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>t :Tags<CR>

" :GGrep - fzf from git grep
command! -bang -nargs=* GGrep
      \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

" :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
" :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

" netrw
" <Ctrl-^> should go to the last file, not to netrw.
" https://github.com/tpope/vim-vinegar/issues/25#issuecomment-42727977
let g:netrw_altfile = 1

" rails
if !exists('g:rails_projections')
  let g:rails_projections = {}
endif
call extend(g:rails_projections, {
      \  "app/presenters/*.rb": {
      \     "command": "presenter",
      \     "test": "spec/presenter/{}_spec.rb",
      \     "alternate": "spec/presenter/{}_spec.rb",
      \     "template": "class {camelcase|capitalize|colons}\nend" }
      \ }, 'keep')
if !exists('g:rails_gem_projections')
  let g:rails_gem_projections = {}
endif
call extend(g:rails_gem_projections, {
      \ "rspec": {
      \    "spec/support/*.rb": {
      \      "command": "support"}},
      \ }, 'keep')

" terraform + commentary
autocmd FileType terraform setlocal commentstring=#%s

" test
let test#strategy = "myvimterminal#Run"
nmap <silent> <Leader>t :TestFile<CR>
nmap <silent> <Leader>T :TestNearest<CR>
nmap <silent> <Leader>a :TestSuite<CR>
