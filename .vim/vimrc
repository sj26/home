if has('vim_starting')
  execute pathogen#infect()
end

if has('persistent_undo')
  set undofile
  set undodir=$HOME/.vim/undo
endif

if has("mac")
  if system("defaults read -g AppleInterfaceStyle") =~ "Dark"
    set background=dark
  else
    set background=light
  end
elseif has("gui")
  set background=light
else
  set background=dark
end

hi clear
hi Comment cterm=italic ctermfg=DarkBlue
hi Constant ctermfg=DarkRed
hi Ignore ctermfg=LightGrey
hi Statement cterm=bold ctermfg=Brown
hi Special ctermfg=DarkMagenta

let mapleader = ','

" Quickly edit vimrc with ,v then reload with ,V
nmap <Leader>v :tabe $MYVIMRC<CR>
nmap <Leader>V :source $MYVIMRC<CR>
autocmd BufEnter * if $MYVIMRC == expand("%:p") | silent! lcd %:p:h | endif

" Format lists within comments
" https://stackoverflow.com/a/37172060/158252
set formatoptions+=n
set formatlistpat=^\\s*\\w\\+[.\)]\\s\\+\\\\|^\\s*[\\-\\+\\*]\\+\\s\\+

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" ack/ag
if executable("ag")
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" fzf
nmap <Leader>f :Files<CR>
nmap <Leader>t :Tags<CR>

" :GGrep - fzf from git grep
command! -bang -nargs=* GGrep
      \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

" :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
" :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

" markdown
let g:markdown_fenced_languages = ['html', 'javascript', 'ruby', 'bash=sh']

" netrw
" <Ctrl-^> should go to the last file, not to netrw.
" https://github.com/tpope/vim-vinegar/issues/25#issuecomment-42727977
let g:netrw_altfile = 1

" rails
if !exists('g:rails_projections')
  let g:rails_projections = {}
endif
call extend(g:rails_projections, {
      \  "app/presenters/*.rb": {
      \     "command": "presenter",
      \     "test": "spec/presenter/{}_spec.rb",
      \     "alternate": "spec/presenter/{}_spec.rb",
      \     "template": "class {camelcase|capitalize|colons}\nend" }
      \ }, 'keep')
if !exists('g:rails_gem_projections')
  let g:rails_gem_projections = {}
endif
call extend(g:rails_gem_projections, {
      \ "rspec": {
      \    "spec/support/*.rb": {
      \      "command": "support"}},
      \ }, 'keep')

" terraform
let g:terraform_align=1

" terraform + commentary
autocmd FileType terraform setlocal commentstring=#%s

" test
let test#strategy = "myvimterminal#Run"
nmap <silent> <Leader>t :TestFile<CR>
nmap <silent> <Leader>T :TestNearest<CR>
nmap <silent> <Leader>r :TestLast<CR>
nmap <silent> <Leader>R :TestVisit<CR>
nmap <silent> <Leader>a :TestSuite<CR>
